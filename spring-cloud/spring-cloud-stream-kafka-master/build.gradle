buildscript {
    ext {
        springBootVersion = '2.1.8.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.github.kt3k.coveralls:com.github.kt3k.coveralls.gradle.plugin:2.8.4") //Send coverage data to coveralls.io
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1') //Build a Docker Image with Gradle
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8') //Integrate with SonarQube
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.palantir.docker'
apply plugin: 'org.sonarqube'

group = 'cristinatech'

springBoot {
    buildInfo {
        properties {
            artifact = 'spring-cloud-stream-kafka'
            version = '1.3.0-SNAPSHOT'
        }
    }
}

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springCloudVersion = 'Greenwich.SR4'
}

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-stream-kafka')

    //Production ready features to help you monitor and manage your application
    compile('org.springframework.boot:spring-boot-starter-actuator')

    //Java Persistence API including spring-data-jpa, spring-orm and Hibernate
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    //Exposing Spring Data repositories over REST via spring-data-rest-webmvc
    compile('org.springframework.boot:spring-boot-starter-data-rest')

    //Instruct Jackson JSON serializer/deserializer to work with Java 8 Date & Time API
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    //Gets rid of boiler plate code in Entity, POJOs, Data Objects
    compileOnly('org.projectlombok:lombok:1.18.10')
    annotationProcessor 'org.projectlombok:lombok'

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.cloud:spring-cloud-stream-test-support')

    //Browsing Spring Data REST repositories in your browser
    runtime('org.springframework.data:spring-data-rest-hal-browser')

    runtime('org.postgresql:postgresql') //PostgreSQL jdbc driver
    runtime('com.zaxxer:HikariCP') //high-performance, production-quality JDBC connection pool
    runtime('org.flywaydb:flyway-core') //Flyway Database Migrations library

    testRuntime('com.h2database:h2') //H2 in-memory database for tests (with embedded support)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

wrapper {
    gradleVersion = '6.0.1'
    distributionType = Wrapper.DistributionType.ALL
}


task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacoco {
    toolVersion = "0.8.5"
}

sonarqube {
    properties {
      property "sonar.sources", "src/main/java/"
      property "sonar.projectKey", "cristinatech:spring-cloud-stream-kafka"
    }
}

jacocoTestReport {
    def coverageSourceDirs = ['src/main/java']
    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
    sourceDirectories.from = files(coverageSourceDirs)
}

build.dependsOn jacocoTestReport

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    saveAsFile = true
    sendToCoveralls = false
}

tasks.coveralls {
    onlyIf { System.env.'CI' }
}

docker {
    name "${project.group}/${springBoot.properties.get("artifact")}"
    files "${project.buildDir}/libs"
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

docker.dependsOn build