// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package vanus.core.proxy;

import "cloudevents.proto";
import "controller.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "meta.proto";

option go_package = "github.com/vanus-labs/vanus/proto/pkg/proxy";

service ControllerProxy {
  // Eventbus
  rpc CreateEventbus(controller.CreateEventbusRequest) returns (meta.Eventbus);
  rpc DeleteEventbus(google.protobuf.UInt64Value) returns (google.protobuf.Empty);
  rpc GetEventbus(google.protobuf.UInt64Value) returns (meta.Eventbus);
  rpc ListEventbus(controller.ListEventbusRequest) returns (controller.ListEventbusResponse);
  rpc UpdateEventbus(controller.UpdateEventbusRequest) returns (meta.Eventbus);
  rpc GetEventbusWithHumanFriendly(controller.GetEventbusWithHumanFriendlyRequest) returns (meta.Eventbus);
  rpc ListSegment(controller.ListSegmentRequest) returns (controller.ListSegmentResponse);

  // Trigger
  rpc CreateSubscription(controller.CreateSubscriptionRequest) returns (meta.Subscription);
  rpc UpdateSubscription(controller.UpdateSubscriptionRequest) returns (meta.Subscription);
  rpc DeleteSubscription(controller.DeleteSubscriptionRequest) returns (google.protobuf.Empty);
  rpc GetSubscription(controller.GetSubscriptionRequest) returns (meta.Subscription);
  rpc ListSubscription(controller.ListSubscriptionRequest) returns (controller.ListSubscriptionResponse);
  rpc DisableSubscription(controller.DisableSubscriptionRequest) returns (google.protobuf.Empty);
  rpc ResumeSubscription(controller.ResumeSubscriptionRequest) returns (google.protobuf.Empty);
  rpc ResetOffsetToTimestamp(controller.ResetOffsetToTimestampRequest) returns (controller.ResetOffsetToTimestampResponse);

  // custom
  rpc ClusterInfo(google.protobuf.Empty) returns (ClusterInfoResponse);
  rpc LookupOffset(LookupOffsetRequest) returns (LookupOffsetResponse);
  rpc GetEvent(GetEventRequest) returns (GetEventResponse);
  rpc ValidateSubscription(ValidateSubscriptionRequest) returns (ValidateSubscriptionResponse);

  // dead letter
  rpc GetDeadLetterEvent(GetDeadLetterEventRequest) returns (GetDeadLetterEventResponse);
  rpc ResendDeadLetterEvent(ResendDeadLetterEventRequest) returns (google.protobuf.Empty);
  rpc SetDeadLetterEventOffset(controller.SetDeadLetterEventOffsetRequest) returns (google.protobuf.Empty);

  // multiple tenant
  rpc GetNamespaceWithHumanFriendly(google.protobuf.StringValue) returns (meta.Namespace);
  rpc CreateNamespace(controller.CreateNamespaceRequest) returns (meta.Namespace);
  rpc ListNamespace(google.protobuf.Empty) returns (controller.ListNamespaceResponse);
  rpc GetNamespace(controller.GetNamespaceRequest) returns (meta.Namespace);
  rpc DeleteNamespace(controller.DeleteNamespaceRequest) returns (google.protobuf.Empty);

  rpc CreateUser(controller.CreateUserRequest) returns (meta.User);
  rpc DeleteUser(google.protobuf.StringValue) returns (google.protobuf.Empty);
  rpc GetUser(google.protobuf.StringValue) returns (meta.User);
  rpc ListUser(google.protobuf.Empty) returns (controller.ListUserResponse);
  rpc CreateToken(controller.CreateTokenRequest) returns (meta.Token);
  rpc DeleteToken(controller.DeleteTokenRequest) returns (google.protobuf.Empty);
  rpc GetUserToken(google.protobuf.StringValue) returns (controller.GetTokenResponse);
  rpc ListToken(google.protobuf.Empty) returns (controller.ListTokenResponse);

  rpc GrantRole(controller.RoleRequest) returns (google.protobuf.Empty);
  rpc RevokeRole(controller.RoleRequest) returns (google.protobuf.Empty);
  rpc GetUserRole(controller.GetUserRoleRequest) returns (controller.GetUserRoleResponse);
  rpc GetResourceRole(controller.GetResourceRoleRequest) returns (controller.GetResourceRoleResponse);
}

message LookupOffsetRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  uint64 eventlog_id = 2;
  int64 timestamp = 3;
  uint64 eventbus_id = 4;
}

message LookupOffsetResponse {
  map<uint64, int64> offsets = 1;
}

message GetEventRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  uint64 eventlog_id = 2;
  int64 offset = 3;
  int32 number = 4;
  string event_id = 5;
  uint64 eventbus_id = 6;
}

message GetEventResponse {
  repeated google.protobuf.BytesValue events = 1;
}

message ClusterInfoResponse {
  int64 cloudevents_port = 1;
  int64 proxy_port = 2;
}

message ValidateSubscriptionRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  uint64 eventlog = 2;
  int64 offset = 3;
  uint64 subscription_id = 4;
  uint64 eventbus_id = 5;

  bytes event = 100;
  controller.SubscriptionRequest subscription = 101;
}

message ValidateSubscriptionResponse {
  bool filter_result = 1;
  bytes transformer_result = 2;
}

service StoreProxy {
  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
  rpc Ack(stream AckRequest) returns (google.protobuf.Empty);
}

message PublishRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  cloudevents.CloudEventBatch events = 2;
  uint64 eventbus_id = 3;
}

message SubscribeRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  string subscription_id = 2;
  uint64 eventbus_id = 3;
}

message SubscribeResponse {
  uint64 sequence_id = 1;
  cloudevents.CloudEventBatch events = 2;
}

message AckRequest {
  uint64 sequence_id = 1;
  string subscription_id = 2;
  bool success = 3;
}

message GetDeadLetterEventRequest {
  uint64 subscription_id = 1;
  uint64 offset = 2;
  int32 number = 3;
}

message GetDeadLetterEventResponse {
  repeated google.protobuf.BytesValue events = 1;
}

message ResendDeadLetterEventRequest {
  uint64 subscription_id = 1;
  uint64 start_offset = 2;
  uint64 end_offset = 3;
}
