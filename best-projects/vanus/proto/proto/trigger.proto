// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package vanus.core.trigger;

import "config.proto";
import "meta.proto";

option go_package = "github.com/vanus-labs/vanus/proto/pkg/trigger";

service TriggerWorker {
  rpc Start(StartTriggerWorkerRequest) returns (StartTriggerWorkerResponse);
  rpc Stop(StopTriggerWorkerRequest) returns (StopTriggerWorkerResponse);
  rpc AddSubscription(AddSubscriptionRequest) returns (AddSubscriptionResponse);
  rpc RemoveSubscription(RemoveSubscriptionRequest) returns (RemoveSubscriptionResponse);
  rpc PauseSubscription(PauseSubscriptionRequest) returns (PauseSubscriptionResponse);
  rpc ResumeSubscription(ResumeSubscriptionRequest) returns (ResumeSubscriptionResponse);
}

message StartTriggerWorkerRequest {
  config.ServerConfig config = 1;
}

message StartTriggerWorkerResponse {}

message StopTriggerWorkerRequest {}

message StopTriggerWorkerResponse {}

message AddSubscriptionRequest {
  uint64 id = 1;
  meta.SubscriptionConfig config = 2;
  repeated meta.Filter filters = 3;
  string sink = 4;
  meta.SinkCredential sink_credential = 5;
  meta.Protocol protocol = 6;
  meta.ProtocolSetting protocol_settings = 7;
  reserved 8; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  meta.Transformer transformer = 9;
  repeated meta.OffsetInfo offsets = 10;
  uint64 eventbus_id = 11;
  uint64 dead_letter_eventbus_id = 12;
  uint64 retry_eventbus_id = 13;
  uint64 timer_eventbus_id = 14;
}

message AddSubscriptionResponse {}

message RemoveSubscriptionRequest {
  uint64 subscription_id = 1;
}

message RemoveSubscriptionResponse {}

message PauseSubscriptionRequest {
  uint64 subscription_id = 1;
}

message PauseSubscriptionResponse {}

message ResumeSubscriptionRequest {
  uint64 subscription_id = 1;
}

message ResumeSubscriptionResponse {}
