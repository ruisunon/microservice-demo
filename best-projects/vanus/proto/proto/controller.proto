// Copyright 2022 Linkall Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package vanus.core.controller;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "meta.proto";

option go_package = "github.com/vanus-labs/vanus/proto/pkg/controller";

service PingServer {
  rpc Ping(google.protobuf.Empty) returns (PingResponse);
}

service NamespaceController {
  rpc CreateNamespace(CreateNamespaceRequest) returns (meta.Namespace);
  rpc ListNamespace(google.protobuf.Empty) returns (ListNamespaceResponse);
  rpc GetNamespace(GetNamespaceRequest) returns (meta.Namespace);
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (google.protobuf.Empty);
  rpc GetNamespaceWithHumanFriendly(google.protobuf.StringValue) returns (meta.Namespace);
}

service EventbusController {
  // grpc -> HTTP
  rpc CreateEventbus(CreateEventbusRequest) returns (meta.Eventbus);
  rpc CreateSystemEventbus(CreateEventbusRequest) returns (meta.Eventbus);
  rpc DeleteEventbus(google.protobuf.UInt64Value) returns (google.protobuf.Empty);
  rpc GetEventbus(google.protobuf.UInt64Value) returns (meta.Eventbus);
  rpc ListEventbus(ListEventbusRequest) returns (ListEventbusResponse);
  rpc UpdateEventbus(UpdateEventbusRequest) returns (meta.Eventbus);
  rpc GetEventbusWithHumanFriendly(GetEventbusWithHumanFriendlyRequest) returns (meta.Eventbus);
  // Don't consider UpdateEventbus now
}

service EventlogController {
  rpc ListSegment(ListSegmentRequest) returns (ListSegmentResponse);
  rpc GetAppendableSegment(GetAppendableSegmentRequest) returns (GetAppendableSegmentResponse);
}

service SegmentController {
  rpc QuerySegmentRouteInfo(QuerySegmentRouteInfoRequest) returns (QuerySegmentRouteInfoResponse);
  rpc SegmentHeartbeat(stream SegmentHeartbeatRequest) returns (SegmentHeartbeatResponse);
  rpc RegisterSegmentServer(RegisterSegmentServerRequest) returns (RegisterSegmentServerResponse);
  rpc UnregisterSegmentServer(UnregisterSegmentServerRequest) returns (UnregisterSegmentServerResponse);
  rpc ReportSegmentBlockIsFull(SegmentHeartbeatRequest) returns (google.protobuf.Empty);
  rpc ReportSegmentLeader(ReportSegmentLeaderRequest) returns (google.protobuf.Empty);
}

service TriggerController {
  rpc CreateSubscription(CreateSubscriptionRequest) returns (meta.Subscription) {}
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (meta.Subscription) {}
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (google.protobuf.Empty) {}
  rpc DisableSubscription(DisableSubscriptionRequest) returns (google.protobuf.Empty);
  rpc ResumeSubscription(ResumeSubscriptionRequest) returns (google.protobuf.Empty);
  rpc GetSubscription(GetSubscriptionRequest) returns (meta.Subscription) {}
  rpc ListSubscription(ListSubscriptionRequest) returns (ListSubscriptionResponse) {}
  rpc TriggerWorkerHeartbeat(stream TriggerWorkerHeartbeatRequest) returns (TriggerWorkerHeartbeatResponse);
  rpc RegisterTriggerWorker(RegisterTriggerWorkerRequest) returns (RegisterTriggerWorkerResponse);
  rpc UnregisterTriggerWorker(UnregisterTriggerWorkerRequest) returns (UnregisterTriggerWorkerResponse);
  rpc ResetOffsetToTimestamp(ResetOffsetToTimestampRequest) returns (ResetOffsetToTimestampResponse);
  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetResponse);
  rpc SetDeadLetterEventOffset(SetDeadLetterEventOffsetRequest) returns (google.protobuf.Empty);
  rpc GetDeadLetterEventOffset(GetDeadLetterEventOffsetRequest) returns (GetDeadLetterEventOffsetResponse);
}

service SnowflakeController {
  rpc GetClusterStartTime(google.protobuf.Empty) returns (google.protobuf.Timestamp);
  rpc RegisterNode(google.protobuf.UInt32Value) returns (google.protobuf.Empty);
  rpc UnregisterNode(google.protobuf.UInt32Value) returns (google.protobuf.Empty);
}

service AuthController{
  rpc CreateUser(CreateUserRequest) returns (meta.User);
  rpc DeleteUser(google.protobuf.StringValue) returns (google.protobuf.Empty);
  rpc GetUser(google.protobuf.StringValue) returns (meta.User);
  rpc ListUser(google.protobuf.Empty) returns (ListUserResponse);
  rpc GetUserByToken(google.protobuf.StringValue) returns (google.protobuf.StringValue);
  rpc CreateToken(CreateTokenRequest) returns (meta.Token);
  rpc DeleteToken(DeleteTokenRequest) returns (google.protobuf.Empty);
  rpc GetToken(google.protobuf.UInt64Value) returns (meta.Token);
  rpc GetUserToken(google.protobuf.StringValue) returns (GetTokenResponse);
  rpc ListToken(google.protobuf.Empty) returns (ListTokenResponse);

  rpc GrantRole(RoleRequest) returns (google.protobuf.Empty);
  rpc RevokeRole(RoleRequest) returns (google.protobuf.Empty);
  rpc GetUserRole(GetUserRoleRequest) returns (GetUserRoleResponse);
  rpc GetResourceRole(GetResourceRoleRequest) returns (GetResourceRoleResponse);
}

message PingResponse {
  string leader_addr = 1;
  string gateway_addr = 2;
  bool is_eventbus_ready = 3;
}

message CreateNamespaceRequest {
  string name = 1;
  string description = 2;
}

message ListNamespaceResponse {
  repeated meta.Namespace namespace = 1;
}

message GetNamespaceRequest {
  uint64 id = 1;
}

message DeleteNamespaceRequest {
  uint64 id = 1;
}

message CreateEventbusRequest {
  string name = 1;
  int32 log_number = 2;
  string description = 3;
  uint64 namespace_id = 4;
}

message ListEventbusRequest {
  uint64 namespace_id = 1;
}

message ListEventbusResponse {
  repeated meta.Eventbus eventbus = 1;
}

message GetEventbusWithHumanFriendlyRequest {
  uint64 namespace_id = 1;
  string eventbus_name = 2;
}

message UpdateEventbusRequest {}

message QuerySegmentRouteInfoRequest {}

message QuerySegmentRouteInfoResponse {}

message SegmentHeartbeatRequest {
  reserved 1; // server_id(uint_64) has been removed at v0.7.0
  uint64 volume_id = 2;
  repeated meta.SegmentHealthInfo health_info = 3;
  string report_time = 4;
  string server_addr = 5;
}

message SegmentHeartbeatResponse {}

message RegisterSegmentServerRequest {
  string address = 1;
  uint64 volume_id = 2;
  uint64 capacity = 3;
}

message RegisterSegmentServerResponse {
  reserved 1; // server_id(uint_64) has been removed at v0.7.0
  map<uint64, meta.Segment> segments = 2;
  uint64 volume_id = 3;
}

message UnregisterSegmentServerRequest {
  reserved 1; // server_id(uint_64) has been removed at v0.7.0
  string address = 2;
  uint64 volume_id = 3;
}

message UnregisterSegmentServerResponse {}

message ReportSegmentLeaderRequest {
  uint64 segment_id = 3;
  uint64 leader_id = 1;
  uint64 term = 2;
}

message SubscriptionRequest {
  string source = 1;
  repeated string types = 2;
  meta.SubscriptionConfig config = 3;
  repeated meta.Filter filters = 4;
  string sink = 5;
  meta.SinkCredential sink_credential = 6;
  meta.Protocol protocol = 7;
  meta.ProtocolSetting protocol_settings = 8;
  reserved 9; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  meta.Transformer transformer = 10;
  string name = 11;
  string description = 12;
  bool disable = 13;
  uint64 eventbus_id = 14;
  uint64 namespace_id = 15;
}

message CreateSubscriptionRequest {
  SubscriptionRequest subscription = 1;
}

message UpdateSubscriptionRequest {
  uint64 id = 1;
  SubscriptionRequest subscription = 2;
}

message GetSubscriptionRequest {
  uint64 id = 1;
}

message DeleteSubscriptionRequest {
  uint64 id = 1;
}

message DisableSubscriptionRequest {
  uint64 id = 1;
  bool declaratively = 2;
}

message ResumeSubscriptionRequest {
  uint64 id = 1;
}

message ListSubscriptionRequest {
  reserved 1; // this field [string eventbus] was removed at v0.7.0, please use eventbus_id
  string name = 2;
  uint64 eventbus_id = 3;
  uint64 namespace_id = 4;
}

message ListSubscriptionResponse {
  repeated meta.Subscription subscription = 1;
}

message SetDeadLetterEventOffsetRequest {
  uint64 subscription_id = 1;
  uint64 offset = 2;
}

message GetDeadLetterEventOffsetRequest {
  uint64 subscription_id = 1;
}

message GetDeadLetterEventOffsetResponse {
  uint64 offset = 1;
}

message RegisterTriggerWorkerRequest {
  string address = 1;
}

message RegisterTriggerWorkerResponse {}

message UnregisterTriggerWorkerRequest {
  string address = 1;
}

message UnregisterTriggerWorkerResponse {}

message TriggerWorkerHeartbeatRequest {
  string address = 1;
  bool started = 2;
  repeated meta.SubscriptionInfo subscription_info = 3;
}

message TriggerWorkerHeartbeatResponse {}

message ResetOffsetToTimestampRequest {
  uint64 subscription_id = 1;
  // utc time milliseconds
  uint64 timestamp = 2;
}

message ResetOffsetToTimestampResponse {
  repeated meta.OffsetInfo offsets = 1;
}

message CommitOffsetRequest {
  repeated meta.SubscriptionInfo subscription_info = 1;
  bool force_commit = 2;
}

message CommitOffsetResponse {
  repeated uint64 fail_subscription_id = 1;
}

message ListSegmentRequest {
  uint64 eventbus_id = 1;
  uint64 eventlog_id = 2;
  // if a segment has the range [a, b), if a <= start_offset < b, the segment
  // will be returned
  int64 start_offset = 3;
  // if a segment has the range [c, d), if end_offset = c, the segment will not
  // be returned
  int64 end_offset = 4;
  // max returned segment number, default is 16
  int32 limited = 5;
}

message ListSegmentResponse {
  repeated meta.Segment segments = 1;
}

message GetAppendableSegmentRequest {
  uint64 eventbus_id = 1;
  uint64 eventlog_id = 2;
  // max returned segment number, default is 2
  int32 limited = 3;
}

message GetAppendableSegmentResponse {
  repeated meta.Segment segments = 3;
}

message CreateUserRequest {
  string identifier = 1;
  string description = 2;
}

message DeleteUserResponse{
  string identifier = 1;
}

message ListUserResponse{
  repeated meta.User users = 1;
}

message CreateTokenRequest{
  string user_identifier = 1;
  string description = 2;
}

message DeleteTokenRequest{
  uint64 id = 1;
}

message GetTokenResponse{
  repeated meta.Token token = 1;
}

message ListTokenResponse{
  repeated meta.Token token = 1;
}

message RoleRequest {
  string user_identifier = 1;
  // for custom defined role
  string role_id = 2;
  // for built-in role
  string role_name = 3;
  uint64 resource_id = 4;
  string resource_kind = 5;
}

message GetUserRoleRequest{
  string user_identifier = 1;
}

message GetUserRoleResponse{
  repeated meta.UserRole user_role = 1;
}

message GetResourceRoleRequest{
  uint64 id = 1;
  string kind = 2;
}

message GetResourceRoleResponse{
  repeated meta.ResourceRole resource_role = 1;
}