// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: trigger.proto

//go:generate mockgen -source=trigger_grpc.pb.go -destination=mock_trigger.go -package=trigger
package trigger

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerWorkerClient is the client API for TriggerWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerWorkerClient interface {
	Start(ctx context.Context, in *StartTriggerWorkerRequest, opts ...grpc.CallOption) (*StartTriggerWorkerResponse, error)
	Stop(ctx context.Context, in *StopTriggerWorkerRequest, opts ...grpc.CallOption) (*StopTriggerWorkerResponse, error)
	AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error)
	RemoveSubscription(ctx context.Context, in *RemoveSubscriptionRequest, opts ...grpc.CallOption) (*RemoveSubscriptionResponse, error)
	PauseSubscription(ctx context.Context, in *PauseSubscriptionRequest, opts ...grpc.CallOption) (*PauseSubscriptionResponse, error)
	ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*ResumeSubscriptionResponse, error)
}

type triggerWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerWorkerClient(cc grpc.ClientConnInterface) TriggerWorkerClient {
	return &triggerWorkerClient{cc}
}

func (c *triggerWorkerClient) Start(ctx context.Context, in *StartTriggerWorkerRequest, opts ...grpc.CallOption) (*StartTriggerWorkerResponse, error) {
	out := new(StartTriggerWorkerResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerWorkerClient) Stop(ctx context.Context, in *StopTriggerWorkerRequest, opts ...grpc.CallOption) (*StopTriggerWorkerResponse, error) {
	out := new(StopTriggerWorkerResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerWorkerClient) AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error) {
	out := new(AddSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/AddSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerWorkerClient) RemoveSubscription(ctx context.Context, in *RemoveSubscriptionRequest, opts ...grpc.CallOption) (*RemoveSubscriptionResponse, error) {
	out := new(RemoveSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/RemoveSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerWorkerClient) PauseSubscription(ctx context.Context, in *PauseSubscriptionRequest, opts ...grpc.CallOption) (*PauseSubscriptionResponse, error) {
	out := new(PauseSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/PauseSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerWorkerClient) ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*ResumeSubscriptionResponse, error) {
	out := new(ResumeSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/vanus.core.trigger.TriggerWorker/ResumeSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerWorkerServer is the server API for TriggerWorker service.
// All implementations should embed UnimplementedTriggerWorkerServer
// for forward compatibility
type TriggerWorkerServer interface {
	Start(context.Context, *StartTriggerWorkerRequest) (*StartTriggerWorkerResponse, error)
	Stop(context.Context, *StopTriggerWorkerRequest) (*StopTriggerWorkerResponse, error)
	AddSubscription(context.Context, *AddSubscriptionRequest) (*AddSubscriptionResponse, error)
	RemoveSubscription(context.Context, *RemoveSubscriptionRequest) (*RemoveSubscriptionResponse, error)
	PauseSubscription(context.Context, *PauseSubscriptionRequest) (*PauseSubscriptionResponse, error)
	ResumeSubscription(context.Context, *ResumeSubscriptionRequest) (*ResumeSubscriptionResponse, error)
}

// UnimplementedTriggerWorkerServer should be embedded to have forward compatible implementations.
type UnimplementedTriggerWorkerServer struct {
}

func (UnimplementedTriggerWorkerServer) Start(context.Context, *StartTriggerWorkerRequest) (*StartTriggerWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTriggerWorkerServer) Stop(context.Context, *StopTriggerWorkerRequest) (*StopTriggerWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTriggerWorkerServer) AddSubscription(context.Context, *AddSubscriptionRequest) (*AddSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (UnimplementedTriggerWorkerServer) RemoveSubscription(context.Context, *RemoveSubscriptionRequest) (*RemoveSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscription not implemented")
}
func (UnimplementedTriggerWorkerServer) PauseSubscription(context.Context, *PauseSubscriptionRequest) (*PauseSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSubscription not implemented")
}
func (UnimplementedTriggerWorkerServer) ResumeSubscription(context.Context, *ResumeSubscriptionRequest) (*ResumeSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSubscription not implemented")
}

// UnsafeTriggerWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerWorkerServer will
// result in compilation errors.
type UnsafeTriggerWorkerServer interface {
	mustEmbedUnimplementedTriggerWorkerServer()
}

func RegisterTriggerWorkerServer(s grpc.ServiceRegistrar, srv TriggerWorkerServer) {
	s.RegisterService(&TriggerWorker_ServiceDesc, srv)
}

func _TriggerWorker_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTriggerWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).Start(ctx, req.(*StartTriggerWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerWorker_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTriggerWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).Stop(ctx, req.(*StopTriggerWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerWorker_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/AddSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).AddSubscription(ctx, req.(*AddSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerWorker_RemoveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).RemoveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/RemoveSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).RemoveSubscription(ctx, req.(*RemoveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerWorker_PauseSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).PauseSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/PauseSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).PauseSubscription(ctx, req.(*PauseSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerWorker_ResumeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerWorkerServer).ResumeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanus.core.trigger.TriggerWorker/ResumeSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerWorkerServer).ResumeSubscription(ctx, req.(*ResumeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerWorker_ServiceDesc is the grpc.ServiceDesc for TriggerWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanus.core.trigger.TriggerWorker",
	HandlerType: (*TriggerWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _TriggerWorker_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TriggerWorker_Stop_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _TriggerWorker_AddSubscription_Handler,
		},
		{
			MethodName: "RemoveSubscription",
			Handler:    _TriggerWorker_RemoveSubscription_Handler,
		},
		{
			MethodName: "PauseSubscription",
			Handler:    _TriggerWorker_PauseSubscription_Handler,
		},
		{
			MethodName: "ResumeSubscription",
			Handler:    _TriggerWorker_ResumeSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger.proto",
}
