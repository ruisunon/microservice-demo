// Code generated by MockGen. DO NOT EDIT.
// Source: trigger_grpc.pb.go

// Package trigger is a generated GoMock package.
package trigger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTriggerWorkerClient is a mock of TriggerWorkerClient interface.
type MockTriggerWorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerWorkerClientMockRecorder
}

// MockTriggerWorkerClientMockRecorder is the mock recorder for MockTriggerWorkerClient.
type MockTriggerWorkerClientMockRecorder struct {
	mock *MockTriggerWorkerClient
}

// NewMockTriggerWorkerClient creates a new mock instance.
func NewMockTriggerWorkerClient(ctrl *gomock.Controller) *MockTriggerWorkerClient {
	mock := &MockTriggerWorkerClient{ctrl: ctrl}
	mock.recorder = &MockTriggerWorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerWorkerClient) EXPECT() *MockTriggerWorkerClientMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockTriggerWorkerClient) AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSubscription", varargs...)
	ret0, _ := ret[0].(*AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockTriggerWorkerClientMockRecorder) AddSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockTriggerWorkerClient)(nil).AddSubscription), varargs...)
}

// PauseSubscription mocks base method.
func (m *MockTriggerWorkerClient) PauseSubscription(ctx context.Context, in *PauseSubscriptionRequest, opts ...grpc.CallOption) (*PauseSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PauseSubscription", varargs...)
	ret0, _ := ret[0].(*PauseSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockTriggerWorkerClientMockRecorder) PauseSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*MockTriggerWorkerClient)(nil).PauseSubscription), varargs...)
}

// RemoveSubscription mocks base method.
func (m *MockTriggerWorkerClient) RemoveSubscription(ctx context.Context, in *RemoveSubscriptionRequest, opts ...grpc.CallOption) (*RemoveSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSubscription", varargs...)
	ret0, _ := ret[0].(*RemoveSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSubscription indicates an expected call of RemoveSubscription.
func (mr *MockTriggerWorkerClientMockRecorder) RemoveSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockTriggerWorkerClient)(nil).RemoveSubscription), varargs...)
}

// ResumeSubscription mocks base method.
func (m *MockTriggerWorkerClient) ResumeSubscription(ctx context.Context, in *ResumeSubscriptionRequest, opts ...grpc.CallOption) (*ResumeSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeSubscription", varargs...)
	ret0, _ := ret[0].(*ResumeSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockTriggerWorkerClientMockRecorder) ResumeSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockTriggerWorkerClient)(nil).ResumeSubscription), varargs...)
}

// Start mocks base method.
func (m *MockTriggerWorkerClient) Start(ctx context.Context, in *StartTriggerWorkerRequest, opts ...grpc.CallOption) (*StartTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(*StartTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTriggerWorkerClientMockRecorder) Start(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTriggerWorkerClient)(nil).Start), varargs...)
}

// Stop mocks base method.
func (m *MockTriggerWorkerClient) Stop(ctx context.Context, in *StopTriggerWorkerRequest, opts ...grpc.CallOption) (*StopTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*StopTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockTriggerWorkerClientMockRecorder) Stop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTriggerWorkerClient)(nil).Stop), varargs...)
}

// MockTriggerWorkerServer is a mock of TriggerWorkerServer interface.
type MockTriggerWorkerServer struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerWorkerServerMockRecorder
}

// MockTriggerWorkerServerMockRecorder is the mock recorder for MockTriggerWorkerServer.
type MockTriggerWorkerServerMockRecorder struct {
	mock *MockTriggerWorkerServer
}

// NewMockTriggerWorkerServer creates a new mock instance.
func NewMockTriggerWorkerServer(ctrl *gomock.Controller) *MockTriggerWorkerServer {
	mock := &MockTriggerWorkerServer{ctrl: ctrl}
	mock.recorder = &MockTriggerWorkerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerWorkerServer) EXPECT() *MockTriggerWorkerServerMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockTriggerWorkerServer) AddSubscription(arg0 context.Context, arg1 *AddSubscriptionRequest) (*AddSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", arg0, arg1)
	ret0, _ := ret[0].(*AddSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockTriggerWorkerServerMockRecorder) AddSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockTriggerWorkerServer)(nil).AddSubscription), arg0, arg1)
}

// PauseSubscription mocks base method.
func (m *MockTriggerWorkerServer) PauseSubscription(arg0 context.Context, arg1 *PauseSubscriptionRequest) (*PauseSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSubscription", arg0, arg1)
	ret0, _ := ret[0].(*PauseSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockTriggerWorkerServerMockRecorder) PauseSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*MockTriggerWorkerServer)(nil).PauseSubscription), arg0, arg1)
}

// RemoveSubscription mocks base method.
func (m *MockTriggerWorkerServer) RemoveSubscription(arg0 context.Context, arg1 *RemoveSubscriptionRequest) (*RemoveSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", arg0, arg1)
	ret0, _ := ret[0].(*RemoveSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSubscription indicates an expected call of RemoveSubscription.
func (mr *MockTriggerWorkerServerMockRecorder) RemoveSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockTriggerWorkerServer)(nil).RemoveSubscription), arg0, arg1)
}

// ResumeSubscription mocks base method.
func (m *MockTriggerWorkerServer) ResumeSubscription(arg0 context.Context, arg1 *ResumeSubscriptionRequest) (*ResumeSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSubscription", arg0, arg1)
	ret0, _ := ret[0].(*ResumeSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockTriggerWorkerServerMockRecorder) ResumeSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockTriggerWorkerServer)(nil).ResumeSubscription), arg0, arg1)
}

// Start mocks base method.
func (m *MockTriggerWorkerServer) Start(arg0 context.Context, arg1 *StartTriggerWorkerRequest) (*StartTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(*StartTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTriggerWorkerServerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTriggerWorkerServer)(nil).Start), arg0, arg1)
}

// Stop mocks base method.
func (m *MockTriggerWorkerServer) Stop(arg0 context.Context, arg1 *StopTriggerWorkerRequest) (*StopTriggerWorkerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*StopTriggerWorkerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockTriggerWorkerServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTriggerWorkerServer)(nil).Stop), arg0, arg1)
}

// MockUnsafeTriggerWorkerServer is a mock of UnsafeTriggerWorkerServer interface.
type MockUnsafeTriggerWorkerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTriggerWorkerServerMockRecorder
}

// MockUnsafeTriggerWorkerServerMockRecorder is the mock recorder for MockUnsafeTriggerWorkerServer.
type MockUnsafeTriggerWorkerServerMockRecorder struct {
	mock *MockUnsafeTriggerWorkerServer
}

// NewMockUnsafeTriggerWorkerServer creates a new mock instance.
func NewMockUnsafeTriggerWorkerServer(ctrl *gomock.Controller) *MockUnsafeTriggerWorkerServer {
	mock := &MockUnsafeTriggerWorkerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTriggerWorkerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTriggerWorkerServer) EXPECT() *MockUnsafeTriggerWorkerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTriggerWorkerServer mocks base method.
func (m *MockUnsafeTriggerWorkerServer) mustEmbedUnimplementedTriggerWorkerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTriggerWorkerServer")
}

// mustEmbedUnimplementedTriggerWorkerServer indicates an expected call of mustEmbedUnimplementedTriggerWorkerServer.
func (mr *MockUnsafeTriggerWorkerServerMockRecorder) mustEmbedUnimplementedTriggerWorkerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTriggerWorkerServer", reflect.TypeOf((*MockUnsafeTriggerWorkerServer)(nil).mustEmbedUnimplementedTriggerWorkerServer))
}
