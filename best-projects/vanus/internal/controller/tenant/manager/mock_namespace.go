// Code generated by MockGen. DO NOT EDIT.
// Source: namespace.go

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/vanus-labs/vanus/internal/controller/tenant/metadata"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
)

// MockNamespaceManager is a mock of NamespaceManager interface.
type MockNamespaceManager struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceManagerMockRecorder
}

// MockNamespaceManagerMockRecorder is the mock recorder for MockNamespaceManager.
type MockNamespaceManagerMockRecorder struct {
	mock *MockNamespaceManager
}

// NewMockNamespaceManager creates a new mock instance.
func NewMockNamespaceManager(ctrl *gomock.Controller) *MockNamespaceManager {
	mock := &MockNamespaceManager{ctrl: ctrl}
	mock.recorder = &MockNamespaceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceManager) EXPECT() *MockNamespaceManagerMockRecorder {
	return m.recorder
}

// AddNamespace mocks base method.
func (m *MockNamespaceManager) AddNamespace(ctx context.Context, ns *metadata.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespace", ctx, ns)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespace indicates an expected call of AddNamespace.
func (mr *MockNamespaceManagerMockRecorder) AddNamespace(ctx, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespace", reflect.TypeOf((*MockNamespaceManager)(nil).AddNamespace), ctx, ns)
}

// DeleteNamespace mocks base method.
func (m *MockNamespaceManager) DeleteNamespace(ctx context.Context, id vanus.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockNamespaceManagerMockRecorder) DeleteNamespace(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockNamespaceManager)(nil).DeleteNamespace), ctx, id)
}

// GetNamespace mocks base method.
func (m *MockNamespaceManager) GetNamespace(ctx context.Context, id vanus.ID) *metadata.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, id)
	ret0, _ := ret[0].(*metadata.Namespace)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockNamespaceManagerMockRecorder) GetNamespace(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespaceManager)(nil).GetNamespace), ctx, id)
}

// GetNamespaceByName mocks base method.
func (m *MockNamespaceManager) GetNamespaceByName(ctx context.Context, name string) *metadata.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByName", ctx, name)
	ret0, _ := ret[0].(*metadata.Namespace)
	return ret0
}

// GetNamespaceByName indicates an expected call of GetNamespaceByName.
func (mr *MockNamespaceManagerMockRecorder) GetNamespaceByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceByName", reflect.TypeOf((*MockNamespaceManager)(nil).GetNamespaceByName), ctx, name)
}

// Init mocks base method.
func (m *MockNamespaceManager) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockNamespaceManagerMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNamespaceManager)(nil).Init), ctx)
}

// ListNamespace mocks base method.
func (m *MockNamespaceManager) ListNamespace(ctx context.Context) []*metadata.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespace", ctx)
	ret0, _ := ret[0].([]*metadata.Namespace)
	return ret0
}

// ListNamespace indicates an expected call of ListNamespace.
func (mr *MockNamespaceManagerMockRecorder) ListNamespace(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespace", reflect.TypeOf((*MockNamespaceManager)(nil).ListNamespace), ctx)
}
