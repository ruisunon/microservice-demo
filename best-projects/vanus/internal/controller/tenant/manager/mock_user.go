// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/vanus-labs/vanus/internal/controller/tenant/metadata"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserManager) AddUser(ctx context.Context, user *metadata.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserManagerMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserManager)(nil).AddUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserManager) DeleteUser(ctx context.Context, identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserManagerMockRecorder) DeleteUser(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserManager)(nil).DeleteUser), ctx, identifier)
}

// GetUser mocks base method.
func (m *MockUserManager) GetUser(ctx context.Context, identifier string) *metadata.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, identifier)
	ret0, _ := ret[0].(*metadata.User)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserManagerMockRecorder) GetUser(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserManager)(nil).GetUser), ctx, identifier)
}

// Init mocks base method.
func (m *MockUserManager) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockUserManagerMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUserManager)(nil).Init), ctx)
}

// ListUser mocks base method.
func (m *MockUserManager) ListUser(ctx context.Context) []*metadata.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx)
	ret0, _ := ret[0].([]*metadata.User)
	return ret0
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserManagerMockRecorder) ListUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserManager)(nil).ListUser), ctx)
}
