// Code generated by MockGen. DO NOT EDIT.
// Source: role.go

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/vanus-labs/vanus/internal/controller/tenant/metadata"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
)

// MockUserRoleManager is a mock of UserRoleManager interface.
type MockUserRoleManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleManagerMockRecorder
}

// MockUserRoleManagerMockRecorder is the mock recorder for MockUserRoleManager.
type MockUserRoleManagerMockRecorder struct {
	mock *MockUserRoleManager
}

// NewMockUserRoleManager creates a new mock instance.
func NewMockUserRoleManager(ctrl *gomock.Controller) *MockUserRoleManager {
	mock := &MockUserRoleManager{ctrl: ctrl}
	mock.recorder = &MockUserRoleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleManager) EXPECT() *MockUserRoleManagerMockRecorder {
	return m.recorder
}

// AddUserRole mocks base method.
func (m *MockUserRoleManager) AddUserRole(ctx context.Context, role *metadata.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockUserRoleManagerMockRecorder) AddUserRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockUserRoleManager)(nil).AddUserRole), ctx, role)
}

// DeleteUserRole mocks base method.
func (m *MockUserRoleManager) DeleteUserRole(ctx context.Context, role *metadata.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockUserRoleManagerMockRecorder) DeleteUserRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockUserRoleManager)(nil).DeleteUserRole), ctx, role)
}

// GetUserRoleByResourceID mocks base method.
func (m *MockUserRoleManager) GetUserRoleByResourceID(ctx context.Context, resourceID vanus.ID) ([]*metadata.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleByResourceID", ctx, resourceID)
	ret0, _ := ret[0].([]*metadata.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleByResourceID indicates an expected call of GetUserRoleByResourceID.
func (mr *MockUserRoleManagerMockRecorder) GetUserRoleByResourceID(ctx, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleByResourceID", reflect.TypeOf((*MockUserRoleManager)(nil).GetUserRoleByResourceID), ctx, resourceID)
}

// GetUserRoleByUser mocks base method.
func (m *MockUserRoleManager) GetUserRoleByUser(ctx context.Context, userIdentifier string) ([]*metadata.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleByUser", ctx, userIdentifier)
	ret0, _ := ret[0].([]*metadata.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleByUser indicates an expected call of GetUserRoleByUser.
func (mr *MockUserRoleManagerMockRecorder) GetUserRoleByUser(ctx, userIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleByUser", reflect.TypeOf((*MockUserRoleManager)(nil).GetUserRoleByUser), ctx, userIdentifier)
}

// Init mocks base method.
func (m *MockUserRoleManager) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockUserRoleManagerMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUserRoleManager)(nil).Init), ctx)
}

// IsUserRoleExist mocks base method.
func (m *MockUserRoleManager) IsUserRoleExist(ctx context.Context, role *metadata.UserRole) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserRoleExist", ctx, role)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserRoleExist indicates an expected call of IsUserRoleExist.
func (mr *MockUserRoleManagerMockRecorder) IsUserRoleExist(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserRoleExist", reflect.TypeOf((*MockUserRoleManager)(nil).IsUserRoleExist), ctx, role)
}
