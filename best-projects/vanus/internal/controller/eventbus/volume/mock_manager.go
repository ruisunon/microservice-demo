// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package volume is a generated GoMock package.
package volume

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/vanus-labs/vanus/internal/controller/eventbus/metadata"
	server "github.com/vanus-labs/vanus/internal/controller/eventbus/server"
	kv "github.com/vanus-labs/vanus/internal/kv"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetAllActiveVolumes mocks base method.
func (m *MockManager) GetAllActiveVolumes() []server.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveVolumes")
	ret0, _ := ret[0].([]server.Instance)
	return ret0
}

// GetAllActiveVolumes indicates an expected call of GetAllActiveVolumes.
func (mr *MockManagerMockRecorder) GetAllActiveVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveVolumes", reflect.TypeOf((*MockManager)(nil).GetAllActiveVolumes))
}

// GetBlocksOfVolume mocks base method.
func (m *MockManager) GetBlocksOfVolume(ctx context.Context, instance server.Instance) (map[uint64]*metadata.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksOfVolume", ctx, instance)
	ret0, _ := ret[0].(map[uint64]*metadata.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksOfVolume indicates an expected call of GetBlocksOfVolume.
func (mr *MockManagerMockRecorder) GetBlocksOfVolume(ctx, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksOfVolume", reflect.TypeOf((*MockManager)(nil).GetBlocksOfVolume), ctx, instance)
}

// GetVolumeInstanceByID mocks base method.
func (m *MockManager) GetVolumeInstanceByID(id vanus.ID) server.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeInstanceByID", id)
	ret0, _ := ret[0].(server.Instance)
	return ret0
}

// GetVolumeInstanceByID indicates an expected call of GetVolumeInstanceByID.
func (mr *MockManagerMockRecorder) GetVolumeInstanceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeInstanceByID", reflect.TypeOf((*MockManager)(nil).GetVolumeInstanceByID), id)
}

// Init mocks base method.
func (m *MockManager) Init(ctx context.Context, kvClient kv.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, kvClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockManagerMockRecorder) Init(ctx, kvClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockManager)(nil).Init), ctx, kvClient)
}

// LookupVolumeByID mocks base method.
func (m *MockManager) LookupVolumeByID(id uint64) server.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupVolumeByID", id)
	ret0, _ := ret[0].(server.Instance)
	return ret0
}

// LookupVolumeByID indicates an expected call of LookupVolumeByID.
func (mr *MockManagerMockRecorder) LookupVolumeByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupVolumeByID", reflect.TypeOf((*MockManager)(nil).LookupVolumeByID), id)
}

// RegisterVolume mocks base method.
func (m *MockManager) RegisterVolume(ctx context.Context, md *metadata.VolumeMetadata) (server.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVolume", ctx, md)
	ret0, _ := ret[0].(server.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVolume indicates an expected call of RegisterVolume.
func (mr *MockManagerMockRecorder) RegisterVolume(ctx, md interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVolume", reflect.TypeOf((*MockManager)(nil).RegisterVolume), ctx, md)
}

// UpdateRouting mocks base method.
func (m *MockManager) UpdateRouting(ctx context.Context, ins server.Instance, srv server.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRouting", ctx, ins, srv)
}

// UpdateRouting indicates an expected call of UpdateRouting.
func (mr *MockManagerMockRecorder) UpdateRouting(ctx, ins, srv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouting", reflect.TypeOf((*MockManager)(nil).UpdateRouting), ctx, ins, srv)
}
