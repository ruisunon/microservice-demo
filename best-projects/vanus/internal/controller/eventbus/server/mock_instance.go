// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "github.com/vanus-labs/vanus/internal/controller/eventbus/metadata"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockInstance) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockInstanceMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockInstance)(nil).Address))
}

// Close mocks base method.
func (m *MockInstance) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInstanceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInstance)(nil).Close))
}

// CreateBlock mocks base method.
func (m *MockInstance) CreateBlock(arg0 context.Context, arg1 int64) (*metadata.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlock", arg0, arg1)
	ret0, _ := ret[0].(*metadata.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlock indicates an expected call of CreateBlock.
func (mr *MockInstanceMockRecorder) CreateBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlock", reflect.TypeOf((*MockInstance)(nil).CreateBlock), arg0, arg1)
}

// DeleteBlock mocks base method.
func (m *MockInstance) DeleteBlock(arg0 context.Context, arg1 vanus.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlock indicates an expected call of DeleteBlock.
func (mr *MockInstanceMockRecorder) DeleteBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockInstance)(nil).DeleteBlock), arg0, arg1)
}

// GetMeta mocks base method.
func (m *MockInstance) GetMeta() *metadata.VolumeMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(*metadata.VolumeMetadata)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockInstanceMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockInstance)(nil).GetMeta))
}

// GetServer mocks base method.
func (m *MockInstance) GetServer() Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockInstanceMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstance)(nil).GetServer))
}

// ID mocks base method.
func (m *MockInstance) ID() vanus.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(vanus.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockInstanceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockInstance)(nil).ID))
}

// SetServer mocks base method.
func (m *MockInstance) SetServer(arg0 Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServer", arg0)
}

// SetServer indicates an expected call of SetServer.
func (mr *MockInstanceMockRecorder) SetServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServer", reflect.TypeOf((*MockInstance)(nil).SetServer), arg0)
}
