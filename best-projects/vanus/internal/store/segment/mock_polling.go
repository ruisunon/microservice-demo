// Code generated by MockGen. DO NOT EDIT.
// Source: polling.go

// Package segment is a generated GoMock package.
package segment

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
)

// MockpollingManager is a mock of pollingManager interface.
type MockpollingManager struct {
	ctrl     *gomock.Controller
	recorder *MockpollingManagerMockRecorder
}

// MockpollingManagerMockRecorder is the mock recorder for MockpollingManager.
type MockpollingManagerMockRecorder struct {
	mock *MockpollingManager
}

// NewMockpollingManager creates a new mock instance.
func NewMockpollingManager(ctrl *gomock.Controller) *MockpollingManager {
	mock := &MockpollingManager{ctrl: ctrl}
	mock.recorder = &MockpollingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpollingManager) EXPECT() *MockpollingManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockpollingManager) Add(ctx context.Context, blockID vanus.ID) <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, blockID)
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockpollingManagerMockRecorder) Add(ctx, blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockpollingManager)(nil).Add), ctx, blockID)
}

// Destroy mocks base method.
func (m *MockpollingManager) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockpollingManagerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockpollingManager)(nil).Destroy))
}

// NewMessageArrived mocks base method.
func (m *MockpollingManager) NewMessageArrived(blockID vanus.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewMessageArrived", blockID)
}

// NewMessageArrived indicates an expected call of NewMessageArrived.
func (mr *MockpollingManagerMockRecorder) NewMessageArrived(blockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageArrived", reflect.TypeOf((*MockpollingManager)(nil).NewMessageArrived), blockID)
}
