// Code generated by MockGen. DO NOT EDIT.
// Source: snapshot_storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSnapshotOperator is a mock of SnapshotOperator interface.
type MockSnapshotOperator struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotOperatorMockRecorder
}

// MockSnapshotOperatorMockRecorder is the mock recorder for MockSnapshotOperator.
type MockSnapshotOperatorMockRecorder struct {
	mock *MockSnapshotOperator
}

// NewMockSnapshotOperator creates a new mock instance.
func NewMockSnapshotOperator(ctrl *gomock.Controller) *MockSnapshotOperator {
	mock := &MockSnapshotOperator{ctrl: ctrl}
	mock.recorder = &MockSnapshotOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotOperator) EXPECT() *MockSnapshotOperatorMockRecorder {
	return m.recorder
}

// ApplySnapshot mocks base method.
func (m *MockSnapshotOperator) ApplySnapshot(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockSnapshotOperatorMockRecorder) ApplySnapshot(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockSnapshotOperator)(nil).ApplySnapshot), data)
}

// GetSnapshot mocks base method.
func (m *MockSnapshotOperator) GetSnapshot(index uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", index)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockSnapshotOperatorMockRecorder) GetSnapshot(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockSnapshotOperator)(nil).GetSnapshot), index)
}
