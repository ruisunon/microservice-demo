// Code generated by MockGen. DO NOT EDIT.
// Source: block.go

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vanus "github.com/vanus-labs/vanus/internal/primitive/vanus"
	block "github.com/vanus-labs/vanus/internal/store/block"
)

// MockSeeker is a mock of Seeker interface.
type MockSeeker struct {
	ctrl     *gomock.Controller
	recorder *MockSeekerMockRecorder
}

// MockSeekerMockRecorder is the mock recorder for MockSeeker.
type MockSeekerMockRecorder struct {
	mock *MockSeeker
}

// NewMockSeeker creates a new mock instance.
func NewMockSeeker(ctrl *gomock.Controller) *MockSeeker {
	mock := &MockSeeker{ctrl: ctrl}
	mock.recorder = &MockSeekerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeeker) EXPECT() *MockSeekerMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockSeeker) Seek(ctx context.Context, index int64, key block.Entry, flag block.SeekKeyFlag) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", ctx, index, key, flag)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockSeekerMockRecorder) Seek(ctx, index, key, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockSeeker)(nil).Seek), ctx, index, key, flag)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReader) Read(ctx context.Context, seq int64, num int) ([]block.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, seq, num)
	ret0, _ := ret[0].([]block.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read(ctx, seq, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read), ctx, seq, num)
}

// MockAppender is a mock of Appender interface.
type MockAppender struct {
	ctrl     *gomock.Controller
	recorder *MockAppenderMockRecorder
}

// MockAppenderMockRecorder is the mock recorder for MockAppender.
type MockAppenderMockRecorder struct {
	mock *MockAppender
}

// NewMockAppender creates a new mock instance.
func NewMockAppender(ctrl *gomock.Controller) *MockAppender {
	mock := &MockAppender{ctrl: ctrl}
	mock.recorder = &MockAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppender) EXPECT() *MockAppenderMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockAppender) Append(ctx context.Context, entries []block.Entry, cb block.AppendCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", ctx, entries, cb)
}

// Append indicates an expected call of Append.
func (mr *MockAppenderMockRecorder) Append(ctx, entries, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockAppender)(nil).Append), ctx, entries, cb)
}

// MockBlock is a mock of Block interface.
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock.
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance.
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockBlock) Append(ctx context.Context, entries []block.Entry, cb block.AppendCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", ctx, entries, cb)
}

// Append indicates an expected call of Append.
func (mr *MockBlockMockRecorder) Append(ctx, entries, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBlock)(nil).Append), ctx, entries, cb)
}

// ID mocks base method.
func (m *MockBlock) ID() vanus.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(vanus.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBlockMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBlock)(nil).ID))
}

// Read mocks base method.
func (m *MockBlock) Read(ctx context.Context, seq int64, num int) ([]block.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, seq, num)
	ret0, _ := ret[0].([]block.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBlockMockRecorder) Read(ctx, seq, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBlock)(nil).Read), ctx, seq, num)
}

// Seek mocks base method.
func (m *MockBlock) Seek(ctx context.Context, index int64, key block.Entry, flag block.SeekKeyFlag) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", ctx, index, key, flag)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockBlockMockRecorder) Seek(ctx, index, key, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockBlock)(nil).Seek), ctx, index, key, flag)
}
