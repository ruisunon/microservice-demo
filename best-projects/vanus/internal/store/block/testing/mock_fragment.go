// Code generated by MockGen. DO NOT EDIT.
// Source: fragment.go

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFragment is a mock of Fragment interface.
type MockFragment struct {
	ctrl     *gomock.Controller
	recorder *MockFragmentMockRecorder
}

// MockFragmentMockRecorder is the mock recorder for MockFragment.
type MockFragmentMockRecorder struct {
	mock *MockFragment
}

// NewMockFragment creates a new mock instance.
func NewMockFragment(ctrl *gomock.Controller) *MockFragment {
	mock := &MockFragment{ctrl: ctrl}
	mock.recorder = &MockFragmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFragment) EXPECT() *MockFragmentMockRecorder {
	return m.recorder
}

// EndOffset mocks base method.
func (m *MockFragment) EndOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// EndOffset indicates an expected call of EndOffset.
func (mr *MockFragmentMockRecorder) EndOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndOffset", reflect.TypeOf((*MockFragment)(nil).EndOffset))
}

// Payload mocks base method.
func (m *MockFragment) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockFragmentMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockFragment)(nil).Payload))
}

// Size mocks base method.
func (m *MockFragment) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockFragmentMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFragment)(nil).Size))
}

// StartOffset mocks base method.
func (m *MockFragment) StartOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// StartOffset indicates an expected call of StartOffset.
func (mr *MockFragmentMockRecorder) StartOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOffset", reflect.TypeOf((*MockFragment)(nil).StartOffset))
}

// MockFragmentMarshaler is a mock of FragmentMarshaler interface.
type MockFragmentMarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockFragmentMarshalerMockRecorder
}

// MockFragmentMarshalerMockRecorder is the mock recorder for MockFragmentMarshaler.
type MockFragmentMarshalerMockRecorder struct {
	mock *MockFragmentMarshaler
}

// NewMockFragmentMarshaler creates a new mock instance.
func NewMockFragmentMarshaler(ctrl *gomock.Controller) *MockFragmentMarshaler {
	mock := &MockFragmentMarshaler{ctrl: ctrl}
	mock.recorder = &MockFragmentMarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFragmentMarshaler) EXPECT() *MockFragmentMarshalerMockRecorder {
	return m.recorder
}

// MarshalFragment mocks base method.
func (m *MockFragmentMarshaler) MarshalFragment() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalFragment")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalFragment indicates an expected call of MarshalFragment.
func (mr *MockFragmentMarshalerMockRecorder) MarshalFragment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalFragment", reflect.TypeOf((*MockFragmentMarshaler)(nil).MarshalFragment))
}
