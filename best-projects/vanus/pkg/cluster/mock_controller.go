// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/vanus-labs/vanus/proto/pkg/controller"
	meta "github.com/vanus-labs/vanus/proto/pkg/meta"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// AuthService mocks base method.
func (m *MockCluster) AuthService() AuthService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthService")
	ret0, _ := ret[0].(AuthService)
	return ret0
}

// AuthService indicates an expected call of AuthService.
func (mr *MockClusterMockRecorder) AuthService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthService", reflect.TypeOf((*MockCluster)(nil).AuthService))
}

// EventbusService mocks base method.
func (m *MockCluster) EventbusService() EventbusService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventbusService")
	ret0, _ := ret[0].(EventbusService)
	return ret0
}

// EventbusService indicates an expected call of EventbusService.
func (mr *MockClusterMockRecorder) EventbusService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventbusService", reflect.TypeOf((*MockCluster)(nil).EventbusService))
}

// EventlogService mocks base method.
func (m *MockCluster) EventlogService() EventlogService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventlogService")
	ret0, _ := ret[0].(EventlogService)
	return ret0
}

// EventlogService indicates an expected call of EventlogService.
func (mr *MockClusterMockRecorder) EventlogService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventlogService", reflect.TypeOf((*MockCluster)(nil).EventlogService))
}

// IDService mocks base method.
func (m *MockCluster) IDService() IDService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDService")
	ret0, _ := ret[0].(IDService)
	return ret0
}

// IDService indicates an expected call of IDService.
func (mr *MockClusterMockRecorder) IDService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDService", reflect.TypeOf((*MockCluster)(nil).IDService))
}

// IsReady mocks base method.
func (m *MockCluster) IsReady(createEventbus bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", createEventbus)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockClusterMockRecorder) IsReady(createEventbus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockCluster)(nil).IsReady), createEventbus)
}

// NamespaceService mocks base method.
func (m *MockCluster) NamespaceService() NamespaceService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceService")
	ret0, _ := ret[0].(NamespaceService)
	return ret0
}

// NamespaceService indicates an expected call of NamespaceService.
func (mr *MockClusterMockRecorder) NamespaceService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceService", reflect.TypeOf((*MockCluster)(nil).NamespaceService))
}

// SegmentService mocks base method.
func (m *MockCluster) SegmentService() SegmentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentService")
	ret0, _ := ret[0].(SegmentService)
	return ret0
}

// SegmentService indicates an expected call of SegmentService.
func (mr *MockClusterMockRecorder) SegmentService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentService", reflect.TypeOf((*MockCluster)(nil).SegmentService))
}

// Status mocks base method.
func (m *MockCluster) Status() Topology {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(Topology)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockClusterMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockCluster)(nil).Status))
}

// TriggerService mocks base method.
func (m *MockCluster) TriggerService() TriggerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerService")
	ret0, _ := ret[0].(TriggerService)
	return ret0
}

// TriggerService indicates an expected call of TriggerService.
func (mr *MockClusterMockRecorder) TriggerService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerService", reflect.TypeOf((*MockCluster)(nil).TriggerService))
}

// WaitForControllerReady mocks base method.
func (m *MockCluster) WaitForControllerReady(createEventbus bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForControllerReady", createEventbus)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForControllerReady indicates an expected call of WaitForControllerReady.
func (mr *MockClusterMockRecorder) WaitForControllerReady(createEventbus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForControllerReady", reflect.TypeOf((*MockCluster)(nil).WaitForControllerReady), createEventbus)
}

// MockNamespaceService is a mock of NamespaceService interface.
type MockNamespaceService struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceServiceMockRecorder
}

// MockNamespaceServiceMockRecorder is the mock recorder for MockNamespaceService.
type MockNamespaceServiceMockRecorder struct {
	mock *MockNamespaceService
}

// NewMockNamespaceService creates a new mock instance.
func NewMockNamespaceService(ctrl *gomock.Controller) *MockNamespaceService {
	mock := &MockNamespaceService{ctrl: ctrl}
	mock.recorder = &MockNamespaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceService) EXPECT() *MockNamespaceServiceMockRecorder {
	return m.recorder
}

// GetDefaultNamespace mocks base method.
func (m *MockNamespaceService) GetDefaultNamespace(ctx context.Context) (*meta.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultNamespace", ctx)
	ret0, _ := ret[0].(*meta.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultNamespace indicates an expected call of GetDefaultNamespace.
func (mr *MockNamespaceServiceMockRecorder) GetDefaultNamespace(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultNamespace", reflect.TypeOf((*MockNamespaceService)(nil).GetDefaultNamespace), ctx)
}

// GetNamespace mocks base method.
func (m *MockNamespaceService) GetNamespace(ctx context.Context, id uint64) (*meta.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, id)
	ret0, _ := ret[0].(*meta.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockNamespaceServiceMockRecorder) GetNamespace(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespaceService)(nil).GetNamespace), ctx, id)
}

// GetNamespaceByName mocks base method.
func (m *MockNamespaceService) GetNamespaceByName(ctx context.Context, name string) (*meta.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByName", ctx, name)
	ret0, _ := ret[0].(*meta.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceByName indicates an expected call of GetNamespaceByName.
func (mr *MockNamespaceServiceMockRecorder) GetNamespaceByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceByName", reflect.TypeOf((*MockNamespaceService)(nil).GetNamespaceByName), ctx, name)
}

// GetSystemNamespace mocks base method.
func (m *MockNamespaceService) GetSystemNamespace(ctx context.Context) (*meta.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemNamespace", ctx)
	ret0, _ := ret[0].(*meta.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemNamespace indicates an expected call of GetSystemNamespace.
func (mr *MockNamespaceServiceMockRecorder) GetSystemNamespace(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemNamespace", reflect.TypeOf((*MockNamespaceService)(nil).GetSystemNamespace), ctx)
}

// RawClient mocks base method.
func (m *MockNamespaceService) RawClient() controller.NamespaceControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.NamespaceControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockNamespaceServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockNamespaceService)(nil).RawClient))
}

// MockEventbusService is a mock of EventbusService interface.
type MockEventbusService struct {
	ctrl     *gomock.Controller
	recorder *MockEventbusServiceMockRecorder
}

// MockEventbusServiceMockRecorder is the mock recorder for MockEventbusService.
type MockEventbusServiceMockRecorder struct {
	mock *MockEventbusService
}

// NewMockEventbusService creates a new mock instance.
func NewMockEventbusService(ctrl *gomock.Controller) *MockEventbusService {
	mock := &MockEventbusService{ctrl: ctrl}
	mock.recorder = &MockEventbusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventbusService) EXPECT() *MockEventbusServiceMockRecorder {
	return m.recorder
}

// CreateSystemEventbusIfNotExist mocks base method.
func (m *MockEventbusService) CreateSystemEventbusIfNotExist(ctx context.Context, name, desc string) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemEventbusIfNotExist", ctx, name, desc)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemEventbusIfNotExist indicates an expected call of CreateSystemEventbusIfNotExist.
func (mr *MockEventbusServiceMockRecorder) CreateSystemEventbusIfNotExist(ctx, name, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemEventbusIfNotExist", reflect.TypeOf((*MockEventbusService)(nil).CreateSystemEventbusIfNotExist), ctx, name, desc)
}

// Delete mocks base method.
func (m *MockEventbusService) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventbusServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventbusService)(nil).Delete), ctx, id)
}

// GetEventbus mocks base method.
func (m *MockEventbusService) GetEventbus(ctx context.Context, id uint64) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventbus", ctx, id)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventbus indicates an expected call of GetEventbus.
func (mr *MockEventbusServiceMockRecorder) GetEventbus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventbus", reflect.TypeOf((*MockEventbusService)(nil).GetEventbus), ctx, id)
}

// GetEventbusByName mocks base method.
func (m *MockEventbusService) GetEventbusByName(ctx context.Context, ns, name string) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventbusByName", ctx, ns, name)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventbusByName indicates an expected call of GetEventbusByName.
func (mr *MockEventbusServiceMockRecorder) GetEventbusByName(ctx, ns, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventbusByName", reflect.TypeOf((*MockEventbusService)(nil).GetEventbusByName), ctx, ns, name)
}

// GetSystemEventbusByName mocks base method.
func (m *MockEventbusService) GetSystemEventbusByName(ctx context.Context, name string) (*meta.Eventbus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemEventbusByName", ctx, name)
	ret0, _ := ret[0].(*meta.Eventbus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemEventbusByName indicates an expected call of GetSystemEventbusByName.
func (mr *MockEventbusServiceMockRecorder) GetSystemEventbusByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemEventbusByName", reflect.TypeOf((*MockEventbusService)(nil).GetSystemEventbusByName), ctx, name)
}

// RawClient mocks base method.
func (m *MockEventbusService) RawClient() controller.EventbusControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.EventbusControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockEventbusServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockEventbusService)(nil).RawClient))
}

// MockEventlogService is a mock of EventlogService interface.
type MockEventlogService struct {
	ctrl     *gomock.Controller
	recorder *MockEventlogServiceMockRecorder
}

// MockEventlogServiceMockRecorder is the mock recorder for MockEventlogService.
type MockEventlogServiceMockRecorder struct {
	mock *MockEventlogService
}

// NewMockEventlogService creates a new mock instance.
func NewMockEventlogService(ctrl *gomock.Controller) *MockEventlogService {
	mock := &MockEventlogService{ctrl: ctrl}
	mock.recorder = &MockEventlogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventlogService) EXPECT() *MockEventlogServiceMockRecorder {
	return m.recorder
}

// RawClient mocks base method.
func (m *MockEventlogService) RawClient() controller.EventlogControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.EventlogControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockEventlogServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockEventlogService)(nil).RawClient))
}

// MockTriggerService is a mock of TriggerService interface.
type MockTriggerService struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerServiceMockRecorder
}

// MockTriggerServiceMockRecorder is the mock recorder for MockTriggerService.
type MockTriggerServiceMockRecorder struct {
	mock *MockTriggerService
}

// NewMockTriggerService creates a new mock instance.
func NewMockTriggerService(ctrl *gomock.Controller) *MockTriggerService {
	mock := &MockTriggerService{ctrl: ctrl}
	mock.recorder = &MockTriggerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerService) EXPECT() *MockTriggerServiceMockRecorder {
	return m.recorder
}

// GetSubscription mocks base method.
func (m *MockTriggerService) GetSubscription(ctx context.Context, id uint64) (*meta.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id)
	ret0, _ := ret[0].(*meta.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockTriggerServiceMockRecorder) GetSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockTriggerService)(nil).GetSubscription), ctx, id)
}

// RawClient mocks base method.
func (m *MockTriggerService) RawClient() controller.TriggerControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.TriggerControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockTriggerServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockTriggerService)(nil).RawClient))
}

// RegisterHeartbeat mocks base method.
func (m *MockTriggerService) RegisterHeartbeat(ctx context.Context, interval time.Duration, reqFunc func() interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHeartbeat", ctx, interval, reqFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHeartbeat indicates an expected call of RegisterHeartbeat.
func (mr *MockTriggerServiceMockRecorder) RegisterHeartbeat(ctx, interval, reqFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHeartbeat", reflect.TypeOf((*MockTriggerService)(nil).RegisterHeartbeat), ctx, interval, reqFunc)
}

// MockIDService is a mock of IDService interface.
type MockIDService struct {
	ctrl     *gomock.Controller
	recorder *MockIDServiceMockRecorder
}

// MockIDServiceMockRecorder is the mock recorder for MockIDService.
type MockIDServiceMockRecorder struct {
	mock *MockIDService
}

// NewMockIDService creates a new mock instance.
func NewMockIDService(ctrl *gomock.Controller) *MockIDService {
	mock := &MockIDService{ctrl: ctrl}
	mock.recorder = &MockIDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDService) EXPECT() *MockIDServiceMockRecorder {
	return m.recorder
}

// RawClient mocks base method.
func (m *MockIDService) RawClient() controller.SnowflakeControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.SnowflakeControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockIDServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockIDService)(nil).RawClient))
}

// MockSegmentService is a mock of SegmentService interface.
type MockSegmentService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentServiceMockRecorder
}

// MockSegmentServiceMockRecorder is the mock recorder for MockSegmentService.
type MockSegmentServiceMockRecorder struct {
	mock *MockSegmentService
}

// NewMockSegmentService creates a new mock instance.
func NewMockSegmentService(ctrl *gomock.Controller) *MockSegmentService {
	mock := &MockSegmentService{ctrl: ctrl}
	mock.recorder = &MockSegmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentService) EXPECT() *MockSegmentServiceMockRecorder {
	return m.recorder
}

// RawClient mocks base method.
func (m *MockSegmentService) RawClient() controller.SegmentControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.SegmentControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockSegmentServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockSegmentService)(nil).RawClient))
}

// RegisterHeartbeat mocks base method.
func (m *MockSegmentService) RegisterHeartbeat(ctx context.Context, interval time.Duration, reqFunc func() interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHeartbeat", ctx, interval, reqFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHeartbeat indicates an expected call of RegisterHeartbeat.
func (mr *MockSegmentServiceMockRecorder) RegisterHeartbeat(ctx, interval, reqFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHeartbeat", reflect.TypeOf((*MockSegmentService)(nil).RegisterHeartbeat), ctx, interval, reqFunc)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetUserByToken mocks base method.
func (m *MockAuthService) GetUserByToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockAuthServiceMockRecorder) GetUserByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockAuthService)(nil).GetUserByToken), ctx, token)
}

// GetUserRole mocks base method.
func (m *MockAuthService) GetUserRole(ctx context.Context, user string) ([]*meta.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, user)
	ret0, _ := ret[0].([]*meta.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockAuthServiceMockRecorder) GetUserRole(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockAuthService)(nil).GetUserRole), ctx, user)
}

// RawClient mocks base method.
func (m *MockAuthService) RawClient() controller.AuthControllerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawClient")
	ret0, _ := ret[0].(controller.AuthControllerClient)
	return ret0
}

// RawClient indicates an expected call of RawClient.
func (mr *MockAuthServiceMockRecorder) RawClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawClient", reflect.TypeOf((*MockAuthService)(nil).RawClient))
}
